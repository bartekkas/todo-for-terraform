// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/spkane/todo-api-example/models"
)

// FindTodoReader is a Reader for the FindTodo structure.
type FindTodoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindTodoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindTodoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewFindTodoDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFindTodoOK creates a FindTodoOK with default headers values
func NewFindTodoOK() *FindTodoOK {
	return &FindTodoOK{}
}

/*FindTodoOK handles this case with default header values.

list the todo
*/
type FindTodoOK struct {
	Payload []*models.Item
}

func (o *FindTodoOK) Error() string {
	return fmt.Sprintf("[GET /{id}][%d] findTodoOK  %+v", 200, o.Payload)
}

func (o *FindTodoOK) GetPayload() []*models.Item {
	return o.Payload
}

func (o *FindTodoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindTodoDefault creates a FindTodoDefault with default headers values
func NewFindTodoDefault(code int) *FindTodoDefault {
	return &FindTodoDefault{
		_statusCode: code,
	}
}

/*FindTodoDefault handles this case with default header values.

generic error response
*/
type FindTodoDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the find todo default response
func (o *FindTodoDefault) Code() int {
	return o._statusCode
}

func (o *FindTodoDefault) Error() string {
	return fmt.Sprintf("[GET /{id}][%d] findTodo default  %+v", o._statusCode, o.Payload)
}

func (o *FindTodoDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *FindTodoDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
